// Code generated by MockGen. DO NOT EDIT.
// Source: ports.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "github.com/zhuravlev-pe/course-watch/internal/core"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// GetUserInfo mocks base method.
func (m *MockUserService) GetUserInfo(ctx context.Context, id string) (*core.GetUserInfoOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, id)
	ret0, _ := ret[0].(*core.GetUserInfoOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockUserServiceMockRecorder) GetUserInfo(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockUserService)(nil).GetUserInfo), ctx, id)
}

// Login mocks base method.
func (m *MockUserService) Login(ctx context.Context, input *core.LoginInput) (*core.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, input)
	ret0, _ := ret[0].(*core.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserServiceMockRecorder) Login(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserService)(nil).Login), ctx, input)
}

// Signup mocks base method.
func (m *MockUserService) Signup(ctx context.Context, input *core.SignupUserInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Signup indicates an expected call of Signup.
func (mr *MockUserServiceMockRecorder) Signup(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockUserService)(nil).Signup), ctx, input)
}

// UpdateUserInfo mocks base method.
func (m *MockUserService) UpdateUserInfo(ctx context.Context, id string, input *core.UpdateUserInfoInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserInfo", ctx, id, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserInfo indicates an expected call of UpdateUserInfo.
func (mr *MockUserServiceMockRecorder) UpdateUserInfo(ctx, id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserInfo", reflect.TypeOf((*MockUserService)(nil).UpdateUserInfo), ctx, id, input)
}

// MockCourseService is a mock of CourseService interface.
type MockCourseService struct {
	ctrl     *gomock.Controller
	recorder *MockCourseServiceMockRecorder
}

// MockCourseServiceMockRecorder is the mock recorder for MockCourseService.
type MockCourseServiceMockRecorder struct {
	mock *MockCourseService
}

// NewMockCourseService creates a new mock instance.
func NewMockCourseService(ctrl *gomock.Controller) *MockCourseService {
	mock := &MockCourseService{ctrl: ctrl}
	mock.recorder = &MockCourseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourseService) EXPECT() *MockCourseServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCourseService) Create(ctx context.Context, input core.CreateCourseInput) (*core.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, input)
	ret0, _ := ret[0].(*core.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCourseServiceMockRecorder) Create(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCourseService)(nil).Create), ctx, input)
}

// GetById mocks base method.
func (m *MockCourseService) GetById(ctx context.Context, id string) (*core.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*core.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockCourseServiceMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockCourseService)(nil).GetById), ctx, id)
}
