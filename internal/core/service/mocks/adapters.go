// Code generated by MockGen. DO NOT EDIT.
// Source: ports.go

// Package mock_adapter is a generated GoMock package.
package mock_adapter

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	core "github.com/zhuravlev-pe/course-watch/internal/core"
)

// MockUsersRepository is a mock of UsersRepository interface.
type MockUsersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRepositoryMockRecorder
}

// MockUsersRepositoryMockRecorder is the mock recorder for MockUsersRepository.
type MockUsersRepositoryMockRecorder struct {
	mock *MockUsersRepository
}

// NewMockUsersRepository creates a new mock instance.
func NewMockUsersRepository(ctrl *gomock.Controller) *MockUsersRepository {
	mock := &MockUsersRepository{ctrl: ctrl}
	mock.recorder = &MockUsersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersRepository) EXPECT() *MockUsersRepositoryMockRecorder {
	return m.recorder
}

// GetByEmail mocks base method.
func (m *MockUsersRepository) GetByEmail(ctx context.Context, email string) (*core.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(*core.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUsersRepositoryMockRecorder) GetByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUsersRepository)(nil).GetByEmail), ctx, email)
}

// GetById mocks base method.
func (m *MockUsersRepository) GetById(ctx context.Context, id string) (*core.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*core.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockUsersRepositoryMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockUsersRepository)(nil).GetById), ctx, id)
}

// Insert mocks base method.
func (m *MockUsersRepository) Insert(ctx context.Context, user *core.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockUsersRepositoryMockRecorder) Insert(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUsersRepository)(nil).Insert), ctx, user)
}

// Update mocks base method.
func (m *MockUsersRepository) Update(ctx context.Context, id string, input *core.UpdateUserInfoInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUsersRepositoryMockRecorder) Update(ctx, id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUsersRepository)(nil).Update), ctx, id, input)
}

// MockCoursesRepository is a mock of CoursesRepository interface.
type MockCoursesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCoursesRepositoryMockRecorder
}

// MockCoursesRepositoryMockRecorder is the mock recorder for MockCoursesRepository.
type MockCoursesRepositoryMockRecorder struct {
	mock *MockCoursesRepository
}

// NewMockCoursesRepository creates a new mock instance.
func NewMockCoursesRepository(ctrl *gomock.Controller) *MockCoursesRepository {
	mock := &MockCoursesRepository{ctrl: ctrl}
	mock.recorder = &MockCoursesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoursesRepository) EXPECT() *MockCoursesRepositoryMockRecorder {
	return m.recorder
}

// GetById mocks base method.
func (m *MockCoursesRepository) GetById(ctx context.Context, id string) (*core.Course, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*core.Course)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockCoursesRepositoryMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockCoursesRepository)(nil).GetById), ctx, id)
}

// Insert mocks base method.
func (m *MockCoursesRepository) Insert(ctx context.Context, course *core.Course) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, course)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockCoursesRepositoryMockRecorder) Insert(ctx, course interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockCoursesRepository)(nil).Insert), ctx, course)
}

// MockIdGenerator is a mock of IdGenerator interface.
type MockIdGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockIdGeneratorMockRecorder
}

// MockIdGeneratorMockRecorder is the mock recorder for MockIdGenerator.
type MockIdGeneratorMockRecorder struct {
	mock *MockIdGenerator
}

// NewMockIdGenerator creates a new mock instance.
func NewMockIdGenerator(ctrl *gomock.Controller) *MockIdGenerator {
	mock := &MockIdGenerator{ctrl: ctrl}
	mock.recorder = &MockIdGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdGenerator) EXPECT() *MockIdGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockIdGenerator) Generate() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate")
	ret0, _ := ret[0].(string)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockIdGeneratorMockRecorder) Generate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockIdGenerator)(nil).Generate))
}
